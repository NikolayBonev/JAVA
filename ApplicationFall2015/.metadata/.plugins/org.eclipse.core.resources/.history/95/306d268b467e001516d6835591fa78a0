
public class Points {

	private int startDirectionX;
	private int	startDirectionY;
	private int finishDirectionX = 0;
	private int finishDirectionY = 0;
	private String path;
	
	public Points(){
		this(0,0, "");
	}
	
	public Points(int x, int y, String path){
		setStartDirectionX(x);
		setStartDirectionY(y);
		setPath(path);
	}
	
	public int getStartDirectionX() {
		return this.startDirectionX;
	}

	public void setStartDirectionX(int startDirectionX) {
		this.startDirectionX = startDirectionX;
	}

	public int getStartDirectionY() {
		return this.startDirectionY;
	}

	public void setStartDirectionY(int startDirectionY) {
		this.startDirectionY = startDirectionY;
	}

	public String getPath() {
		return this.path;
	}

	public void setPath(String path) {
		if(path != null){
			this.path = path;
		}else{
			System.out.println("Enter correct path!");
		}
	}
	
	public int getFinishDirectionX() {
		return finishDirectionX;
	}

	public void setFinishDirectionX(int finishDirectionX) {
		this.finishDirectionX = finishDirectionX;
	}

	public int getFinishDirectionY() {
		return finishDirectionY;
	}

	public void setFinishDirectionY(int finishDirectionY) {
		this.finishDirectionY = finishDirectionY;
	}

	public void findEndPoint(){
		
		boolean warpFlag = false;
		
		for(int i = 0 ; i < getPath().length() ; i++){
			
			if(warpFlag == false){
				if(getPath().charAt(i) == '>'){
					setFinishDirectionX(getFinishDirectionX() + 1);
				}else if(getPath().charAt(i) == '<'){
					setFinishDirectionX(getFinishDirectionX() - 1);
				}else if(getPath().charAt(i) == 'v'){
					setFinishDirectionY(getFinishDirectionY() + 1);
				}else if(getPath().charAt(i) == '^'){
					setFinishDirectionY(getFinishDirectionY() - 1);
				}else if(getPath().charAt(i) == '~'){
					warpFlag = true;
				}else{
					System.out.println("Invalid path!");
					break;
				}
			}else{
				if(getPath().charAt(i) == '>'){
					setFinishDirectionX(getFinishDirectionX() - 1);
				}else if(getPath().charAt(i) == '<'){
					setFinishDirectionX(getFinishDirectionX() + 1);
				}else if(getPath().charAt(i) == 'v'){
					setFinishDirectionY(getFinishDirectionY() - 1);
				}else if(getPath().charAt(i) == '^'){
					setFinishDirectionY(getFinishDirectionY() + 1);
				}else if(getPath().charAt(i) == '~'){
					warpFlag = true;
				}else{
					System.out.println("Invalid path!");
					break;
				}
			}
		}
		
	}
	
	public void print(){
		
		System.out.println("End point is: (" + getFinishDirectionX() + " ," + getFinishDirectionY() + ")");
	}

	public static void main(String[] args) {
		
		Points point = new Points(0, 0, ">>><<<>>>^^^");
		
		point.findEndPoint();
		
		point.print();
	}

}
