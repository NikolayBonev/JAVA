
public class WordGame {
	
	private int countHits = 0;
	private char[][] matrix;
	static String word = "ivan";
	
	public int getCountHits() {
		return countHits;
	}

	public void setCountHits(int countHits) {
		this.countHits = countHits;
	}

	
	

	
	public static void main(String[] args){
		
//		char[][] matrix = {{'i', 'v', 'a', 'n', 'i'}, {'v', 'v', 's', 'v', 'n'}, {'a', 'w', 'a', 'p', 'a'}, {'n', 'n', 'q', 'n', 'v'}, {'p', 'n', 'a', 'v', 'i'}};
		
		
//		wordFinder(matrix);
		
	}
	
	public void wordFinder(char[][] matrix){
		
		int index = 0;
		for(int i = 0 ; i < matrix.length ; i++){
			for(int j = 0 ; j < matrix[i].length ; j++){
				if(word.charAt(index) == matrix[i][j]){
					System.out.println(word.charAt(index)+ " " + i + " " +j);
					rowWordFinder(i, j, matrix, index);
					colWordFinder(i, j, matrix, index);
					mainCrossWordFinder(i, j, matrix, index);
					secondaryCrossWordFinder(i, j, matrix, index);			
				}
			}
		}
		
	}
	
	public void rowWordFinder(int x, int y, char[][] matrix, int index){
		
//		Searches the word from left to right
		index = 1;
		
		if((matrix[x].length -1 -y) >= (word.length() -1)){		
			for(int i = (y+1) ; i < matrix[x].length ; i++){
				if (word.charAt(index) == matrix[x][i]) {
					index++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}

		index = 1;
	
//		Searches the word from right to left
	
		if(y>= (word.length() -1)){
			for(int i = (y-1) ; i >= 0 ; i--){
				if (word.charAt(index) == matrix[x][i]) {
					index++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
	}
	
	public void colWordFinder(int x, int y, char[][] matrix, int index){
//		Searches the word from top to bottom
		
		index = 1;
		
		if((matrix.length -1 - x) >= (word.length() -1)){
			for(int i = (x+1) ; i < matrix[x].length ; i++){
				if (word.charAt(index) == matrix[i][y]) {
					index++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
		
		index = 1;
		
//		Searches the word from bottom to top
		
		if(x >= (word.length() -1)){
			for(int i = (x-1) ; i >= 0 ; i--){
				if (word.charAt(index) == matrix[i][y]) {
					index++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
	}
	
	public void mainCrossWordFinder(int x, int y, char[][] matrix, int index){

//		Searches word across
		
		index = 1;
		
		if((matrix.length -1 - x) >= (word.length() -1) && (matrix[x].length -1 -y) >= (word.length() -1)){		
			int i = x + 1;
			int j = y + 1;
			
			while(true){			
				if (word.charAt(index) == matrix[i][j]) {
					index++;
					i++;
					j++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
		
		index = 1;
		
		if(x >= (word.length() -1) && y >= (word.length() -1)){			
			int i = x - 1;
			int j = y - 1;
			
			while(true){			
				if (word.charAt(index) == matrix[i][j]) {
					index++;
					i--;
					j--;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
	}
	
	public void secondaryCrossWordFinder(int x, int y, char[][] matrix, int index){
		
		index = 1;
		
//		Searches in secondary crosses for the given word from bottom left to top right
		
		if(x >= (word.length() -1) && (word.length() -1 - y) >= (word.length() -1)){	
			int i = x - 1;
			int j = y + 1;
			
			while(true){	
				if (word.charAt(index) == matrix[i][j]) {
					index++;
					i--;
					j++;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}
		
		index = 1;
		
//		Searches in secondary crosses for the given word from top right to bottom left
		
		if(y >= (word.length() -1) && (word.length() -1 - x ) >= (word.length() -1)){
			int i = x + 1;
			int j = y - 1;
			
			while(true){	
				if (word.charAt(index) == matrix[i][j]) {
					index++;
					i++;
					j--;
				}else{
					break;
				}
				
				if(index == word.length()){
					setCountHits(getCountHits() + 1);
					break;
				}
			}
		}	
	}	
}