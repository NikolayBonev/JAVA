package depedencies;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class DepedenciesResolving {
	public static void main(String[] args) {
		String pathPackages = "../DepedenciesResolving/depedencies/all_packages.json";
		String pathDependencies = "../DepedenciesResolving/depedencies/dependencies.json";
		
		HashMap<String, ArrayList<String>> dataBasePackages = new HashMap<String, ArrayList<String>>();
		HashMap<String, ArrayList<String>> depedeciesProject = new HashMap<String, ArrayList<String>>();
		
		loadDataBase(dataBasePackages, pathPackages);
		depedenciesMaker(depedeciesProject, pathDependencies);
		installPackages(dataBasePackages, depedeciesProject);
	}

	public static void installPackages(HashMap<String, ArrayList<String>> dataBasePackages, HashMap<String, ArrayList<String>> depedeciesProject){
		
		Stack<String> bufferPackages = new Stack<String>();
		
		ArrayList<String> projectPackageDependecies= depedeciesProject.get("dependencies");
		
		if(projectPackageDependecies.size() > 0){
			for(int i = projectPackageDependecies.size() - 1 ; i >= 0 ; i--){
				bufferPackages.push(projectPackageDependecies.get(i));
			}
		}
		
		while(!bufferPackages.isEmpty()){
			String depen = bufferPackages.pop();
			ArrayList<String> depenArr= dataBasePackages.get(depen);
			if(depenArr.size() > 0){
				for(int i = depenArr.size() - 1 ; i >= 0 ; i--){
					bufferPackages.push(depenArr.get(i));
				}
			}		
		}
		
		System.out.println(bufferPackages.pop());
	}
	
	public static void loadDataBase(HashMap<String, ArrayList<String>> dataBasePackages, String pathPackages){
		try {

			BufferedReader reader = new BufferedReader(new FileReader(pathPackages));

			while (reader.ready()) {
				String line = reader.readLine();
				
				if(line != "\n" && !line.contains("{") && !line.contains("}")){
					packagesDataBaseMaker(line, dataBasePackages);
				}
			}
			reader.close();
			
			
		} catch (IOException e) {
			System.out.println("Error: ");
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}
	
	public static void depedenciesMaker(HashMap<String, ArrayList<String>> depedencies, String pathDepedencies){
				
		BufferedReader reader;
		
		try {

			reader = new BufferedReader(new FileReader(pathDepedencies));

			while (reader.ready()) {
				String line = reader.readLine();
				
				if(line == "\n" || line.contains("{") || line.contains("}")){
					continue;				
				}else if(line.contains("dependencies")){
					packagesDataBaseMaker(line, depedencies);
					
					
					if(depedencies.containsKey("dependencies")){
						return;
					}
				}
			}
			reader.close();
			
			
		} catch (IOException e) {
			System.out.println("Error: ");
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}
	
	public static void packagesDataBaseMaker(String line, HashMap<String, ArrayList<String>> packageDataBase){
	
		ArrayList<String> depedenceList;
		
		int spliterSemicolon = line.indexOf(":");
		int spliterOpen = line.indexOf("[");
		int spliterClose = line.indexOf("]");
		
		String newLine = line.substring(0, spliterSemicolon).replaceAll("[^a-zA-z]", "");
		
		String depedencies = line.substring(spliterOpen+1, spliterClose).replaceAll("\"", "");
		
		String[] packages = depedencies.split(", ");
		
		depedenceList = new ArrayList<String>();
		
		for(int j = 0 ; j < packages.length ; j++){
			depedenceList.add(packages[j]);
		}
		
		packageDataBase.put(newLine, depedenceList);
	
	}
}
