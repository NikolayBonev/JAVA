package depedencies;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;

public class DepedenciesResolving {
	
	private HashMap<String, ArrayList<String>> dataBasePackages;
	private HashMap<String, ArrayList<String>> depedeciesProject;
	private ArrayList<String> dir;
	
	
	
	public HashMap<String, ArrayList<String>> getDataBasePackages() {
		return this.dataBasePackages;
	}

	public void setDataBasePackages(HashMap<String, ArrayList<String>> dataBasePackages) {
		this.dataBasePackages = dataBasePackages;
	}

	public HashMap<String, ArrayList<String>> getDepedeciesProject() {
		return this.depedeciesProject;
	}

	public void setDepedeciesProject(HashMap<String, ArrayList<String>> depedeciesProject) {
		this.depedeciesProject = depedeciesProject;
	}

	public ArrayList<String> getDir() {
		return this.dir;
	}

	public void setDir(ArrayList<String> dir) {
		this.dir = dir;
	}

	public void installer() {
		String pathPackages = "../DepedenciesResolving/depedencies/all_packages.json";
		String pathDependencies = "../DepedenciesResolving/depedencies/dependencies.json";
		String pathInstalledModuls = "../DepedenciesResolving/depedencies/installed_modules";
		
		setDataBasePackages(new HashMap<String, ArrayList<String>>());
		setDepedeciesProject(new HashMap<String, ArrayList<String>>());
		
		loadDataBase(pathPackages);
		depedenciesMaker(pathDependencies);
		installPackages(pathInstalledModuls);
	}
	
	public void searchInstalledModuls(String pathInstalledModuls){
		File file = new File(pathInstalledModuls);
		
		String[] files = file.list();
		ArrayList<String> dir = new ArrayList<String>();
		
		for(String name : files){
			if(new File(pathInstalledModuls+name).isDirectory()){
				dir.add(name);
			}
		}
		
		setDir(dir);
	}

	public void installPackages(String pathInstalledModuls){
		
		Stack<String> bufferPackages = new Stack<String>();
		
		stackLoader("dependencies", bufferPackages, depedeciesProject);
		
		while(!bufferPackages.isEmpty()){
			String depen = bufferPackages.pop();
			
			boolean flag = stackLoader(depen, bufferPackages, dataBasePackages);
			
			if(flag){
				continue;
			}
			
			System.out.println("Instaling " + depen);
		}
	}
	
	public boolean stackLoader(String searchedPackage, Stack<String> bufferPackages, HashMap<String, ArrayList<String>> packages){
		ArrayList<String> packageBuffer= packages.get(searchedPackage);
		
		if(packageBuffer != null && packageBuffer.size() > 0){
			for(int i = packageBuffer.size() - 1 ; i >= 0 ; i--){
				bufferPackages.push(packageBuffer.get(i));
			}
		}else{
			return true;
		}
		
		return false;
	}
	
	public void loadDataBase(String pathPackages){
		try {

			BufferedReader reader = new BufferedReader(new FileReader(pathPackages));

			while (reader.ready()) {
				String line = reader.readLine();
				
				if(line != "\n" && !line.contains("{") && !line.contains("}")){
					packagesDataBaseMaker(line, getDataBasePackages());
				}
			}
			reader.close();
			
			
		} catch (IOException e) {
			System.out.println("Error: ");
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}
	
	public void depedenciesMaker(String pathDepedencies){
				
		BufferedReader reader;
		
		try {

			reader = new BufferedReader(new FileReader(pathDepedencies));

			while (reader.ready()) {
				String line = reader.readLine();
				
				if(line == "\n" || line.contains("{") || line.contains("}")){
					continue;				
				}else if(line.contains("dependencies")){
					packagesDataBaseMaker(line, getDepedeciesProject());
					
					
					if(this.depedeciesProject.containsKey("dependencies")){
						return;
					}
				}
			}
			reader.close();
			
			
		} catch (IOException e) {
			System.out.println("Error: ");
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}
	
	public void packagesDataBaseMaker(String line, HashMap<String, ArrayList<String>> packageDataBase){
	
		ArrayList<String> depedenceList;
		
		int spliterSemicolon = line.indexOf(":");
		int spliterOpen = line.indexOf("[");
		int spliterClose = line.indexOf("]");
		
		String newLine = line.substring(0, spliterSemicolon).replaceAll("[^a-zA-z]", "");
		
		String depedencies = line.substring(spliterOpen+1, spliterClose).replaceAll("\"", "");
		
		String[] packages = depedencies.split(", ");
		
		depedenceList = new ArrayList<String>();
		
		for(int j = 0 ; j < packages.length ; j++){
			if(!packages[j].equals(" ")){
				depedenceList.add(packages[j]);
			}
		}
		
		packageDataBase.put(newLine, depedenceList);
	
	}
}
